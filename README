This version of xv6 was modified by Dimitri Schiavone to add the semaphores system calls and functionality
as per an assignment at the course "System and device programming" at the Polytechnic University of Turin.
You can find the text of the assignment in the pdf file "assignment.pdf" in this repository.

Design and implementation notes:
I went with the route of compile time allocated semaphores for simplicity and because the function prototypes in the assignment had integer type arguments.
The basic idea is to have a pre defined table of semaphores and to use the integer arguments to index into this table. 
At system startup main.c calls semaphore_init() which just loops over the semaphore table flagging all entries as free.
After that when a user program issues sem_alloc(), the function scans through the table to find the first entry flagged as free and returns the index of this 
entry to the user;on the other hand if there is no free entry the function returns -1 to its caller.
All the other functions take atleast the index of the semaphore as the argument and use pointer arithmetic to check wether the index provided by the user program
is in the range of valid indexes. The code should be self explanatory.
Lastly i did some extra work to automatically destroy semaphores used by a process when it exits. To do so i added a field in the per process proc table that is
an array large NSEM like the semaphore table; every entry of this array can be 1 or 0 to indicate wether this process is using semaphore[i] or not. 
In the code of exit in "proc.c" i have added the code for checking wether the exiting process is using any semaphore and if its parent is not using them, in this case
i call sem_destroy() for each semaphore that has to be destroyed.

Final observations:
I acknowledge that this implementation lacks many features like dynamic allocation of semaphore (this is because i did not implement kmalloc for xv6), per process semaphores and also i acknowledge a pitfall of my design.
That is, semaphores are not protected by other processes (they behave like named semaphores on other systems whereas they should worl like unnamed ones) e.g. what happens if another process that has not allocated a semaphore calls sem_wait() or sem_post() on a 
semaphore allocated by another process? The programs might deadlock or interfere with each other. Also what happens if you try to destroy a semaphore and then allocate
it in another part of the program or in another process and call sem_wait() or sem_post without calling first sem_init()? You get to use the semaphore with the previous
count value that was initialized previously. My design relies on the user programs not doing bad things and that assumption holds as long as i am the only user of the 
system.
Correcting these bugs might happen in the future when i have more time to play with xv6(for now i just had to have simple working semaphores for the assignment).
The interested readers should take this into account when using this source and eventually add any needed modifications.

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also http://pdos.csail.mit.edu/6.828/2007/v6.html, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people made contributions:
    Russ Cox (context switching, locking)
    Cliff Frey (MP)
    Xiao Yu (MP)
    Nickolai Zeldovich
    Austin Clements

In addition, we are grateful for the patches contributed by Greg
Price, Yandong Mao, and Hitoshi Mitake.

The code in the files that constitute xv6 is
Copyright 2006-2011 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

If you spot errors or have suggestions for improvement, please send
email to Frans Kaashoek and Robert Morris (kaashoek,rtm@csail.mit.edu). 

BUILDING AND RUNNING XV6

To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run "make".
On non-x86 or non-ELF machines (like OS X, even on x86), you will
need to install a cross-compiler gcc suite capable of producing x86 ELF
binaries.  See http://pdos.csail.mit.edu/6.828/2011/tools.html.
Then run "make TOOLPREFIX=i386-jos-elf-".

To run xv6, you can use Bochs or QEMU, both PC simulators.
Bochs makes debugging easier, but QEMU is much faster. 
To run in Bochs, run "make bochs" and then type "c" at the bochs prompt.
To run in QEMU, run "make qemu".

To create a typeset version of the code, run "make xv6.pdf".  This
requires the "mpage" utility.  See http://www.mesa.nl/pub/mpage/.
